"use strict";

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.aitmed.ecos.v1beta1.Doc', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.Edge', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.Vertex', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.aitmed.ecos.v1beta1.Vertex = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.aitmed.ecos.v1beta1.Vertex, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.Vertex.displayName = 'proto.aitmed.ecos.v1beta1.Vertex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.aitmed.ecos.v1beta1.Edge = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.aitmed.ecos.v1beta1.Edge, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.Edge.displayName = 'proto.aitmed.ecos.v1beta1.Edge';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.aitmed.ecos.v1beta1.Doc = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.aitmed.ecos.v1beta1.Doc, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.Doc.displayName = 'proto.aitmed.ecos.v1beta1.Doc';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.aitmed.ecos.v1beta1.Vertex.prototype.toObject = function (opt_includeInstance) {
    return proto.aitmed.ecos.v1beta1.Vertex.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.aitmed.ecos.v1beta1.Vertex} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.aitmed.ecos.v1beta1.Vertex.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      ctime: jspb.Message.getFieldWithDefault(msg, 1, 0),
      mtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
      atime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      atimes: jspb.Message.getFieldWithDefault(msg, 4, 0),
      tage: jspb.Message.getFieldWithDefault(msg, 5, 0),
      id: msg.getId_asB64(),
      type: jspb.Message.getFieldWithDefault(msg, 7, 0),
      name: jspb.Message.getFieldWithDefault(msg, 8, ""),
      deat: jspb.Message.getFieldWithDefault(msg, 9, ""),
      pk: msg.getPk_asB64(),
      esk: msg.getEsk_asB64(),
      uid: jspb.Message.getFieldWithDefault(msg, 12, ""),
      subtype: jspb.Message.getFieldWithDefault(msg, 13, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.Vertex}
 */


proto.aitmed.ecos.v1beta1.Vertex.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.Vertex();
  return proto.aitmed.ecos.v1beta1.Vertex.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.Vertex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.Vertex}
 */


proto.aitmed.ecos.v1beta1.Vertex.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setCtime(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setMtime(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setAtime(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setAtimes(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setTage(value);
        break;

      case 6:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setId(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setType(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeat(value);
        break;

      case 10:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setPk(value);
        break;

      case 11:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setEsk(value);
        break;

      case 12:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setUid(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setSubtype(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.Vertex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.Vertex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.aitmed.ecos.v1beta1.Vertex.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCtime();

  if (f !== 0) {
    writer.writeInt64(1, f);
  }

  f = message.getMtime();

  if (f !== 0) {
    writer.writeInt64(2, f);
  }

  f = message.getAtime();

  if (f !== 0) {
    writer.writeInt64(3, f);
  }

  f = message.getAtimes();

  if (f !== 0) {
    writer.writeInt32(4, f);
  }

  f = message.getTage();

  if (f !== 0) {
    writer.writeInt32(5, f);
  }

  f = message.getId_asU8();

  if (f.length > 0) {
    writer.writeBytes(6, f);
  }

  f = message.getType();

  if (f !== 0) {
    writer.writeInt32(7, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getDeat();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getPk_asU8();

  if (f.length > 0) {
    writer.writeBytes(10, f);
  }

  f = message.getEsk_asU8();

  if (f.length > 0) {
    writer.writeBytes(11, f);
  }

  f = message.getUid();

  if (f.length > 0) {
    writer.writeString(12, f);
  }

  f = message.getSubtype();

  if (f !== 0) {
    writer.writeInt32(13, f);
  }
};
/**
 * optional int64 ctime = 1;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getCtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setCtime = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 mtime = 2;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getMtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setMtime = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 atime = 3;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getAtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setAtime = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 atimes = 4;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getAtimes = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setAtimes = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int32 tage = 5;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getTage = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setTage = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional bytes id = 6;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getId = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * optional bytes id = 6;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getId_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getId())
  );
};
/**
 * optional bytes id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getId_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getId())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setId = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};
/**
 * optional int32 type = 7;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getType = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional string name = 8;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional string deat = 9;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getDeat = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setDeat = function (value) {
  jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional bytes pk = 10;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getPk = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 10, "")
  );
};
/**
 * optional bytes pk = 10;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getPk_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getPk())
  );
};
/**
 * optional bytes pk = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getPk_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getPk())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setPk = function (value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};
/**
 * optional bytes esk = 11;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getEsk = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * optional bytes esk = 11;
 * This is a type-conversion wrapper around `getEsk()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getEsk_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getEsk())
  );
};
/**
 * optional bytes esk = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEsk()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getEsk_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getEsk())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setEsk = function (value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};
/**
 * optional string uid = 12;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getUid = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 12, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setUid = function (value) {
  jspb.Message.setProto3StringField(this, 12, value);
};
/**
 * optional int32 subtype = 13;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Vertex.prototype.getSubtype = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Vertex.prototype.setSubtype = function (value) {
  jspb.Message.setProto3IntField(this, 13, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.aitmed.ecos.v1beta1.Edge.prototype.toObject = function (opt_includeInstance) {
    return proto.aitmed.ecos.v1beta1.Edge.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.aitmed.ecos.v1beta1.Edge} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.aitmed.ecos.v1beta1.Edge.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      ctime: jspb.Message.getFieldWithDefault(msg, 1, 0),
      mtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
      atime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      atimes: jspb.Message.getFieldWithDefault(msg, 4, 0),
      tage: jspb.Message.getFieldWithDefault(msg, 5, 0),
      id: msg.getId_asB64(),
      type: jspb.Message.getFieldWithDefault(msg, 7, 0),
      name: jspb.Message.getFieldWithDefault(msg, 8, ""),
      deat: jspb.Message.getFieldWithDefault(msg, 9, ""),
      subtype: jspb.Message.getFieldWithDefault(msg, 10, 0),
      bvid: msg.getBvid_asB64(),
      evid: msg.getEvid_asB64(),
      stime: jspb.Message.getFieldWithDefault(msg, 13, 0),
      etime: jspb.Message.getFieldWithDefault(msg, 14, 0),
      refid: msg.getRefid_asB64(),
      besak: msg.getBesak_asB64(),
      eesak: msg.getEesak_asB64(),
      sig: msg.getSig_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.Edge}
 */


proto.aitmed.ecos.v1beta1.Edge.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.Edge();
  return proto.aitmed.ecos.v1beta1.Edge.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.Edge}
 */


proto.aitmed.ecos.v1beta1.Edge.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setCtime(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setMtime(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setAtime(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setAtimes(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setTage(value);
        break;

      case 6:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setId(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setType(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeat(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setSubtype(value);
        break;

      case 11:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setBvid(value);
        break;

      case 12:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setEvid(value);
        break;

      case 13:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setStime(value);
        break;

      case 14:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setEtime(value);
        break;

      case 15:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setRefid(value);
        break;

      case 16:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setBesak(value);
        break;

      case 17:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setEesak(value);
        break;

      case 18:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setSig(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.Edge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.Edge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.aitmed.ecos.v1beta1.Edge.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCtime();

  if (f !== 0) {
    writer.writeInt64(1, f);
  }

  f = message.getMtime();

  if (f !== 0) {
    writer.writeInt64(2, f);
  }

  f = message.getAtime();

  if (f !== 0) {
    writer.writeInt64(3, f);
  }

  f = message.getAtimes();

  if (f !== 0) {
    writer.writeInt32(4, f);
  }

  f = message.getTage();

  if (f !== 0) {
    writer.writeInt32(5, f);
  }

  f = message.getId_asU8();

  if (f.length > 0) {
    writer.writeBytes(6, f);
  }

  f = message.getType();

  if (f !== 0) {
    writer.writeInt32(7, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getDeat();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getSubtype();

  if (f !== 0) {
    writer.writeInt32(10, f);
  }

  f = message.getBvid_asU8();

  if (f.length > 0) {
    writer.writeBytes(11, f);
  }

  f = message.getEvid_asU8();

  if (f.length > 0) {
    writer.writeBytes(12, f);
  }

  f = message.getStime();

  if (f !== 0) {
    writer.writeInt64(13, f);
  }

  f = message.getEtime();

  if (f !== 0) {
    writer.writeInt64(14, f);
  }

  f = message.getRefid_asU8();

  if (f.length > 0) {
    writer.writeBytes(15, f);
  }

  f = message.getBesak_asU8();

  if (f.length > 0) {
    writer.writeBytes(16, f);
  }

  f = message.getEesak_asU8();

  if (f.length > 0) {
    writer.writeBytes(17, f);
  }

  f = message.getSig_asU8();

  if (f.length > 0) {
    writer.writeBytes(18, f);
  }
};
/**
 * optional int64 ctime = 1;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getCtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setCtime = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 mtime = 2;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getMtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setMtime = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 atime = 3;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getAtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setAtime = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 atimes = 4;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getAtimes = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setAtimes = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int32 tage = 5;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getTage = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setTage = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional bytes id = 6;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getId = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * optional bytes id = 6;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getId_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getId())
  );
};
/**
 * optional bytes id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getId_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getId())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setId = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};
/**
 * optional int32 type = 7;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getType = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional string name = 8;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional string deat = 9;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getDeat = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setDeat = function (value) {
  jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional int32 subtype = 10;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getSubtype = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setSubtype = function (value) {
  jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional bytes bvid = 11;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBvid = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * optional bytes bvid = 11;
 * This is a type-conversion wrapper around `getBvid()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBvid_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getBvid())
  );
};
/**
 * optional bytes bvid = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBvid()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBvid_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getBvid())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setBvid = function (value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};
/**
 * optional bytes evid = 12;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEvid = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 12, "")
  );
};
/**
 * optional bytes evid = 12;
 * This is a type-conversion wrapper around `getEvid()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEvid_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getEvid())
  );
};
/**
 * optional bytes evid = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvid()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEvid_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getEvid())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setEvid = function (value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};
/**
 * optional int64 stime = 13;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getStime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 13, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setStime = function (value) {
  jspb.Message.setProto3IntField(this, 13, value);
};
/**
 * optional int64 etime = 14;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 14, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setEtime = function (value) {
  jspb.Message.setProto3IntField(this, 14, value);
};
/**
 * optional bytes refid = 15;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getRefid = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 15, "")
  );
};
/**
 * optional bytes refid = 15;
 * This is a type-conversion wrapper around `getRefid()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getRefid_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getRefid())
  );
};
/**
 * optional bytes refid = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefid()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getRefid_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getRefid())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setRefid = function (value) {
  jspb.Message.setProto3BytesField(this, 15, value);
};
/**
 * optional bytes besak = 16;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBesak = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 16, "")
  );
};
/**
 * optional bytes besak = 16;
 * This is a type-conversion wrapper around `getBesak()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBesak_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getBesak())
  );
};
/**
 * optional bytes besak = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBesak()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getBesak_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getBesak())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setBesak = function (value) {
  jspb.Message.setProto3BytesField(this, 16, value);
};
/**
 * optional bytes eesak = 17;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEesak = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 17, "")
  );
};
/**
 * optional bytes eesak = 17;
 * This is a type-conversion wrapper around `getEesak()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEesak_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getEesak())
  );
};
/**
 * optional bytes eesak = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEesak()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getEesak_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getEesak())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setEesak = function (value) {
  jspb.Message.setProto3BytesField(this, 17, value);
};
/**
 * optional bytes sig = 18;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getSig = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 18, "")
  );
};
/**
 * optional bytes sig = 18;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getSig_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getSig())
  );
};
/**
 * optional bytes sig = 18;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Edge.prototype.getSig_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getSig())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Edge.prototype.setSig = function (value) {
  jspb.Message.setProto3BytesField(this, 18, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.aitmed.ecos.v1beta1.Doc.prototype.toObject = function (opt_includeInstance) {
    return proto.aitmed.ecos.v1beta1.Doc.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.aitmed.ecos.v1beta1.Doc} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.aitmed.ecos.v1beta1.Doc.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      ctime: jspb.Message.getFieldWithDefault(msg, 1, 0),
      mtime: jspb.Message.getFieldWithDefault(msg, 2, 0),
      atime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      atimes: jspb.Message.getFieldWithDefault(msg, 4, 0),
      tage: jspb.Message.getFieldWithDefault(msg, 5, 0),
      id: msg.getId_asB64(),
      type: jspb.Message.getFieldWithDefault(msg, 7, 0),
      name: jspb.Message.getFieldWithDefault(msg, 8, ""),
      deat: jspb.Message.getFieldWithDefault(msg, 9, ""),
      size: jspb.Message.getFieldWithDefault(msg, 10, 0),
      fid: msg.getFid_asB64(),
      eid: msg.getEid_asB64(),
      bsig: msg.getBsig_asB64(),
      esig: msg.getEsig_asB64(),
      subtype: jspb.Message.getFieldWithDefault(msg, 15, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.Doc}
 */


proto.aitmed.ecos.v1beta1.Doc.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.Doc();
  return proto.aitmed.ecos.v1beta1.Doc.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.Doc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.Doc}
 */


proto.aitmed.ecos.v1beta1.Doc.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setCtime(value);
        break;

      case 2:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setMtime(value);
        break;

      case 3:
        var value =
        /** @type {number} */
        reader.readInt64();
        msg.setAtime(value);
        break;

      case 4:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setAtimes(value);
        break;

      case 5:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setTage(value);
        break;

      case 6:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setId(value);
        break;

      case 7:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setType(value);
        break;

      case 8:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setName(value);
        break;

      case 9:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setDeat(value);
        break;

      case 10:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setSize(value);
        break;

      case 11:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setFid(value);
        break;

      case 12:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setEid(value);
        break;

      case 13:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setBsig(value);
        break;

      case 14:
        var value =
        /** @type {!Uint8Array} */
        reader.readBytes();
        msg.setEsig(value);
        break;

      case 15:
        var value =
        /** @type {number} */
        reader.readInt32();
        msg.setSubtype(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.Doc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.Doc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.aitmed.ecos.v1beta1.Doc.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCtime();

  if (f !== 0) {
    writer.writeInt64(1, f);
  }

  f = message.getMtime();

  if (f !== 0) {
    writer.writeInt64(2, f);
  }

  f = message.getAtime();

  if (f !== 0) {
    writer.writeInt64(3, f);
  }

  f = message.getAtimes();

  if (f !== 0) {
    writer.writeInt32(4, f);
  }

  f = message.getTage();

  if (f !== 0) {
    writer.writeInt32(5, f);
  }

  f = message.getId_asU8();

  if (f.length > 0) {
    writer.writeBytes(6, f);
  }

  f = message.getType();

  if (f !== 0) {
    writer.writeInt32(7, f);
  }

  f = message.getName();

  if (f.length > 0) {
    writer.writeString(8, f);
  }

  f = message.getDeat();

  if (f.length > 0) {
    writer.writeString(9, f);
  }

  f = message.getSize();

  if (f !== 0) {
    writer.writeInt32(10, f);
  }

  f = message.getFid_asU8();

  if (f.length > 0) {
    writer.writeBytes(11, f);
  }

  f = message.getEid_asU8();

  if (f.length > 0) {
    writer.writeBytes(12, f);
  }

  f = message.getBsig_asU8();

  if (f.length > 0) {
    writer.writeBytes(13, f);
  }

  f = message.getEsig_asU8();

  if (f.length > 0) {
    writer.writeBytes(14, f);
  }

  f = message.getSubtype();

  if (f !== 0) {
    writer.writeInt32(15, f);
  }
};
/**
 * optional int64 ctime = 1;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getCtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 1, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setCtime = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional int64 mtime = 2;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getMtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 2, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setMtime = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};
/**
 * optional int64 atime = 3;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getAtime = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setAtime = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 atimes = 4;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getAtimes = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setAtimes = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int32 tage = 5;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getTage = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 5, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setTage = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional bytes id = 6;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getId = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 6, "")
  );
};
/**
 * optional bytes id = 6;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getId_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getId())
  );
};
/**
 * optional bytes id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getId_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getId())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setId = function (value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};
/**
 * optional int32 type = 7;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getType = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 7, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setType = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};
/**
 * optional string name = 8;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getName = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 8, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setName = function (value) {
  jspb.Message.setProto3StringField(this, 8, value);
};
/**
 * optional string deat = 9;
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getDeat = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 9, "")
  );
};
/** @param {string} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setDeat = function (value) {
  jspb.Message.setProto3StringField(this, 9, value);
};
/**
 * optional int32 size = 10;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getSize = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 10, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setSize = function (value) {
  jspb.Message.setProto3IntField(this, 10, value);
};
/**
 * optional bytes fid = 11;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getFid = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 11, "")
  );
};
/**
 * optional bytes fid = 11;
 * This is a type-conversion wrapper around `getFid()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getFid_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getFid())
  );
};
/**
 * optional bytes fid = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFid()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getFid_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getFid())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setFid = function (value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};
/**
 * optional bytes eid = 12;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEid = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 12, "")
  );
};
/**
 * optional bytes eid = 12;
 * This is a type-conversion wrapper around `getEid()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEid_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getEid())
  );
};
/**
 * optional bytes eid = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEid()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEid_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getEid())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setEid = function (value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};
/**
 * optional bytes bsig = 13;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getBsig = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 13, "")
  );
};
/**
 * optional bytes bsig = 13;
 * This is a type-conversion wrapper around `getBsig()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getBsig_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getBsig())
  );
};
/**
 * optional bytes bsig = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBsig()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getBsig_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getBsig())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setBsig = function (value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};
/**
 * optional bytes esig = 14;
 * @return {!(string|Uint8Array)}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEsig = function () {
  return (
    /** @type {!(string|Uint8Array)} */
    jspb.Message.getFieldWithDefault(this, 14, "")
  );
};
/**
 * optional bytes esig = 14;
 * This is a type-conversion wrapper around `getEsig()`
 * @return {string}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEsig_asB64 = function () {
  return (
    /** @type {string} */
    jspb.Message.bytesAsB64(this.getEsig())
  );
};
/**
 * optional bytes esig = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEsig()`
 * @return {!Uint8Array}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getEsig_asU8 = function () {
  return (
    /** @type {!Uint8Array} */
    jspb.Message.bytesAsU8(this.getEsig())
  );
};
/** @param {!(string|Uint8Array)} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setEsig = function (value) {
  jspb.Message.setProto3BytesField(this, 14, value);
};
/**
 * optional int32 subtype = 15;
 * @return {number}
 */


proto.aitmed.ecos.v1beta1.Doc.prototype.getSubtype = function () {
  return (
    /** @type {number} */
    jspb.Message.getFieldWithDefault(this, 15, 0)
  );
};
/** @param {number} value */


proto.aitmed.ecos.v1beta1.Doc.prototype.setSubtype = function (value) {
  jspb.Message.setProto3IntField(this, 15, value);
};

goog.object.extend(exports, proto.aitmed.ecos.v1beta1);