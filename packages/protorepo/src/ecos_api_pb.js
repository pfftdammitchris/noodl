/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var ecos_v1beta1_types_pb = require('../../ecos/v1beta1/types_pb.js');
goog.object.extend(proto, ecos_v1beta1_types_pb);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.cdReq', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.cdResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.ceReq', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.ceResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.cvReq', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.cvResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.dxReq', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.dxResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.rdResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.reResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.rvResp', null, global);
goog.exportSymbol('proto.aitmed.ecos.v1beta1.rxReq', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.ceReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.ceReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.ceReq.displayName = 'proto.aitmed.ecos.v1beta1.ceReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.ceResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.ceResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.ceResp.displayName = 'proto.aitmed.ecos.v1beta1.ceResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.rxReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aitmed.ecos.v1beta1.rxReq.repeatedFields_, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.rxReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.rxReq.displayName = 'proto.aitmed.ecos.v1beta1.rxReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.reResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aitmed.ecos.v1beta1.reResp.repeatedFields_, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.reResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.reResp.displayName = 'proto.aitmed.ecos.v1beta1.reResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.rvResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aitmed.ecos.v1beta1.rvResp.repeatedFields_, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.rvResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.rvResp.displayName = 'proto.aitmed.ecos.v1beta1.rvResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.rdResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aitmed.ecos.v1beta1.rdResp.repeatedFields_, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.rdResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.rdResp.displayName = 'proto.aitmed.ecos.v1beta1.rdResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.dxReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aitmed.ecos.v1beta1.dxReq.repeatedFields_, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.dxReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.dxReq.displayName = 'proto.aitmed.ecos.v1beta1.dxReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.dxResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.dxResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.dxResp.displayName = 'proto.aitmed.ecos.v1beta1.dxResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.cvReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.cvReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.cvReq.displayName = 'proto.aitmed.ecos.v1beta1.cvReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.cvResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.cvResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.cvResp.displayName = 'proto.aitmed.ecos.v1beta1.cvResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.cdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.cdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.cdReq.displayName = 'proto.aitmed.ecos.v1beta1.cdReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aitmed.ecos.v1beta1.cdResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aitmed.ecos.v1beta1.cdResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aitmed.ecos.v1beta1.cdResp.displayName = 'proto.aitmed.ecos.v1beta1.cdResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.ceReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.ceReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.ceReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pmask: (f = msg.getPmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    rmask: (f = msg.getRmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    edge: (f = msg.getEdge()) && ecos_v1beta1_types_pb.Edge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.ceReq}
 */
proto.aitmed.ecos.v1beta1.ceReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.ceReq;
  return proto.aitmed.ecos.v1beta1.ceReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.ceReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.ceReq}
 */
proto.aitmed.ecos.v1beta1.ceReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setPmask(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setRmask(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Edge;
      reader.readMessage(value,ecos_v1beta1_types_pb.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.ceReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.ceReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.ceReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPmask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getRmask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.ceReq.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask pmask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.getPmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.ceReq.prototype.setPmask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.clearPmask = function() {
  this.setPmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.hasPmask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask rmask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.getRmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.ceReq.prototype.setRmask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.clearRmask = function() {
  this.setRmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.hasRmask = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Edge edge = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Edge}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.getEdge = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Edge} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Edge, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Edge|undefined} value */
proto.aitmed.ecos.v1beta1.ceReq.prototype.setEdge = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.clearEdge = function() {
  this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.ceReq.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.ceResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.ceResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.ceResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    edge: (f = msg.getEdge()) && ecos_v1beta1_types_pb.Edge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.ceResp}
 */
proto.aitmed.ecos.v1beta1.ceResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.ceResp;
  return proto.aitmed.ecos.v1beta1.ceResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.ceResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.ceResp}
 */
proto.aitmed.ecos.v1beta1.ceResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Edge;
      reader.readMessage(value,ecos_v1beta1_types_pb.Edge.deserializeBinaryFromReader);
      msg.setEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.ceResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.ceResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.ceResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEdge();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.ceResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.ceResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.ceResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Edge edge = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Edge}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.getEdge = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Edge} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Edge, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Edge|undefined} value */
proto.aitmed.ecos.v1beta1.ceResp.prototype.setEdge = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.clearEdge = function() {
  this.setEdge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.ceResp.prototype.hasEdge = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aitmed.ecos.v1beta1.rxReq.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.rxReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.rxReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rxReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pmask: (f = msg.getPmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    rmask: (f = msg.getRmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    objtype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    idList: msg.getIdList_asB64(),
    xfname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 7, 0),
    key: jspb.Message.getFieldWithDefault(msg, 8, ""),
    sfname: jspb.Message.getFieldWithDefault(msg, 9, ""),
    loid: msg.getLoid_asB64(),
    maxcount: jspb.Message.getFieldWithDefault(msg, 11, 0),
    obfname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    scondition: jspb.Message.getFieldWithDefault(msg, 13, ""),
    asc: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.rxReq}
 */
proto.aitmed.ecos.v1beta1.rxReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.rxReq;
  return proto.aitmed.ecos.v1beta1.rxReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.rxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.rxReq}
 */
proto.aitmed.ecos.v1beta1.rxReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setPmask(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setRmask(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setObjtype(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setXfname(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSfname(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLoid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setObfname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setScondition(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.rxReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.rxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rxReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPmask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getRmask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getObjtype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIdList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getXfname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSfname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLoid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getObfname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getScondition();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAsc();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask pmask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getPmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setPmask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.clearPmask = function() {
  this.setPmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.hasPmask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask rmask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getRmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setRmask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.clearRmask = function() {
  this.setRmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.hasRmask = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 ObjType = 4;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getObjtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setObjtype = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated bytes id = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getIdList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes id = 5;
 * This is a type-conversion wrapper around `getIdList()`
 * @return {!Array<string>}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getIdList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIdList()));
};


/**
 * repeated bytes id = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdList()`
 * @return {!Array<!Uint8Array>}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getIdList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIdList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setIdList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.addId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.clearIdList = function() {
  this.setIdList([]);
};


/**
 * optional string xfname = 6;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getXfname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setXfname = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 type = 7;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string key = 8;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string sfname = 9;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getSfname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setSfname = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes loid = 10;
 * @return {!(string|Uint8Array)}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getLoid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes loid = 10;
 * This is a type-conversion wrapper around `getLoid()`
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getLoid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLoid()));
};


/**
 * optional bytes loid = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLoid()`
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getLoid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLoid()));
};


/** @param {!(string|Uint8Array)} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setLoid = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional int32 maxcount = 11;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setMaxcount = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string obfname = 12;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getObfname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setObfname = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string sCondition = 13;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getScondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setScondition = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bool asc = 14;
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.rxReq.prototype.getAsc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.aitmed.ecos.v1beta1.rxReq.prototype.setAsc = function(value) {
  jspb.Message.setProto3BooleanField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aitmed.ecos.v1beta1.reResp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.reResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.reResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.reResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    edgeList: jspb.Message.toObjectList(msg.getEdgeList(),
    ecos_v1beta1_types_pb.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.reResp}
 */
proto.aitmed.ecos.v1beta1.reResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.reResp;
  return proto.aitmed.ecos.v1beta1.reResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.reResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.reResp}
 */
proto.aitmed.ecos.v1beta1.reResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Edge;
      reader.readMessage(value,ecos_v1beta1_types_pb.Edge.deserializeBinaryFromReader);
      msg.addEdge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.reResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.reResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.reResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.reResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.reResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.reResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Edge edge = 4;
 * @return {!Array<!proto.aitmed.ecos.v1beta1.Edge>}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.getEdgeList = function() {
  return /** @type{!Array<!proto.aitmed.ecos.v1beta1.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, ecos_v1beta1_types_pb.Edge, 4));
};


/** @param {!Array<!proto.aitmed.ecos.v1beta1.Edge>} value */
proto.aitmed.ecos.v1beta1.reResp.prototype.setEdgeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.aitmed.ecos.v1beta1.Edge=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aitmed.ecos.v1beta1.Edge}
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.addEdge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.aitmed.ecos.v1beta1.Edge, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.aitmed.ecos.v1beta1.reResp.prototype.clearEdgeList = function() {
  this.setEdgeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aitmed.ecos.v1beta1.rvResp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.rvResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.rvResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rvResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vertexList: jspb.Message.toObjectList(msg.getVertexList(),
    ecos_v1beta1_types_pb.Vertex.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.rvResp}
 */
proto.aitmed.ecos.v1beta1.rvResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.rvResp;
  return proto.aitmed.ecos.v1beta1.rvResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.rvResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.rvResp}
 */
proto.aitmed.ecos.v1beta1.rvResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Vertex;
      reader.readMessage(value,ecos_v1beta1_types_pb.Vertex.deserializeBinaryFromReader);
      msg.addVertex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.rvResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.rvResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rvResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVertexList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Vertex.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rvResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.rvResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rvResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Vertex vertex = 4;
 * @return {!Array<!proto.aitmed.ecos.v1beta1.Vertex>}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.getVertexList = function() {
  return /** @type{!Array<!proto.aitmed.ecos.v1beta1.Vertex>} */ (
    jspb.Message.getRepeatedWrapperField(this, ecos_v1beta1_types_pb.Vertex, 4));
};


/** @param {!Array<!proto.aitmed.ecos.v1beta1.Vertex>} value */
proto.aitmed.ecos.v1beta1.rvResp.prototype.setVertexList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.aitmed.ecos.v1beta1.Vertex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aitmed.ecos.v1beta1.Vertex}
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.addVertex = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.aitmed.ecos.v1beta1.Vertex, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.aitmed.ecos.v1beta1.rvResp.prototype.clearVertexList = function() {
  this.setVertexList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aitmed.ecos.v1beta1.rdResp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.rdResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.rdResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rdResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    docList: jspb.Message.toObjectList(msg.getDocList(),
    ecos_v1beta1_types_pb.Doc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.rdResp}
 */
proto.aitmed.ecos.v1beta1.rdResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.rdResp;
  return proto.aitmed.ecos.v1beta1.rdResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.rdResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.rdResp}
 */
proto.aitmed.ecos.v1beta1.rdResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Doc;
      reader.readMessage(value,ecos_v1beta1_types_pb.Doc.deserializeBinaryFromReader);
      msg.addDoc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.rdResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.rdResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.rdResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDocList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Doc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rdResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.rdResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.rdResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Doc doc = 4;
 * @return {!Array<!proto.aitmed.ecos.v1beta1.Doc>}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.getDocList = function() {
  return /** @type{!Array<!proto.aitmed.ecos.v1beta1.Doc>} */ (
    jspb.Message.getRepeatedWrapperField(this, ecos_v1beta1_types_pb.Doc, 4));
};


/** @param {!Array<!proto.aitmed.ecos.v1beta1.Doc>} value */
proto.aitmed.ecos.v1beta1.rdResp.prototype.setDocList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.aitmed.ecos.v1beta1.Doc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aitmed.ecos.v1beta1.Doc}
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.addDoc = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.aitmed.ecos.v1beta1.Doc, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.aitmed.ecos.v1beta1.rdResp.prototype.clearDocList = function() {
  this.setDocList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aitmed.ecos.v1beta1.dxReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.dxReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.dxReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.dxReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idList: msg.getIdList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.dxReq}
 */
proto.aitmed.ecos.v1beta1.dxReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.dxReq;
  return proto.aitmed.ecos.v1beta1.dxReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.dxReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.dxReq}
 */
proto.aitmed.ecos.v1beta1.dxReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.dxReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.dxReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.dxReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.dxReq.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes id = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.getIdList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes id = 2;
 * This is a type-conversion wrapper around `getIdList()`
 * @return {!Array<string>}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.getIdList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIdList()));
};


/**
 * repeated bytes id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdList()`
 * @return {!Array<!Uint8Array>}
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.getIdList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIdList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.aitmed.ecos.v1beta1.dxReq.prototype.setIdList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.addId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.aitmed.ecos.v1beta1.dxReq.prototype.clearIdList = function() {
  this.setIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.dxResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.dxResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.dxResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.dxResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.dxResp}
 */
proto.aitmed.ecos.v1beta1.dxResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.dxResp;
  return proto.aitmed.ecos.v1beta1.dxResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.dxResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.dxResp}
 */
proto.aitmed.ecos.v1beta1.dxResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.dxResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.dxResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.dxResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.dxResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.dxResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.dxResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.dxResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.dxResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.dxResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.dxResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.cvReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.cvReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cvReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pmask: (f = msg.getPmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    rmask: (f = msg.getRmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    vertex: (f = msg.getVertex()) && ecos_v1beta1_types_pb.Vertex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.cvReq}
 */
proto.aitmed.ecos.v1beta1.cvReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.cvReq;
  return proto.aitmed.ecos.v1beta1.cvReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.cvReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.cvReq}
 */
proto.aitmed.ecos.v1beta1.cvReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setPmask(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setRmask(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Vertex;
      reader.readMessage(value,ecos_v1beta1_types_pb.Vertex.deserializeBinaryFromReader);
      msg.setVertex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.cvReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.cvReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cvReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPmask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getRmask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getVertex();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Vertex.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cvReq.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask pmask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.getPmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.cvReq.prototype.setPmask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.clearPmask = function() {
  this.setPmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.hasPmask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask rmask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.getRmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.cvReq.prototype.setRmask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.clearRmask = function() {
  this.setRmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.hasRmask = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Vertex vertex = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Vertex}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.getVertex = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Vertex} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Vertex, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Vertex|undefined} value */
proto.aitmed.ecos.v1beta1.cvReq.prototype.setVertex = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.clearVertex = function() {
  this.setVertex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cvReq.prototype.hasVertex = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.cvResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.cvResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cvResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vertex: (f = msg.getVertex()) && ecos_v1beta1_types_pb.Vertex.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.cvResp}
 */
proto.aitmed.ecos.v1beta1.cvResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.cvResp;
  return proto.aitmed.ecos.v1beta1.cvResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.cvResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.cvResp}
 */
proto.aitmed.ecos.v1beta1.cvResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Vertex;
      reader.readMessage(value,ecos_v1beta1_types_pb.Vertex.deserializeBinaryFromReader);
      msg.setVertex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.cvResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.cvResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cvResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVertex();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Vertex.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cvResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.cvResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cvResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Vertex vertex = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Vertex}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.getVertex = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Vertex} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Vertex, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Vertex|undefined} value */
proto.aitmed.ecos.v1beta1.cvResp.prototype.setVertex = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.clearVertex = function() {
  this.setVertex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cvResp.prototype.hasVertex = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.cdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.cdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pmask: (f = msg.getPmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    rmask: (f = msg.getRmask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    doc: (f = msg.getDoc()) && ecos_v1beta1_types_pb.Doc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.cdReq}
 */
proto.aitmed.ecos.v1beta1.cdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.cdReq;
  return proto.aitmed.ecos.v1beta1.cdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.cdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.cdReq}
 */
proto.aitmed.ecos.v1beta1.cdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setPmask(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setRmask(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Doc;
      reader.readMessage(value,ecos_v1beta1_types_pb.Doc.deserializeBinaryFromReader);
      msg.setDoc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.cdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.cdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPmask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getRmask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getDoc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Doc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cdReq.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask pmask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.getPmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.cdReq.prototype.setPmask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.clearPmask = function() {
  this.setPmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.hasPmask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask rmask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.getRmask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.aitmed.ecos.v1beta1.cdReq.prototype.setRmask = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.clearRmask = function() {
  this.setRmask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.hasRmask = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Doc doc = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Doc}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.getDoc = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Doc} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Doc, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Doc|undefined} value */
proto.aitmed.ecos.v1beta1.cdReq.prototype.setDoc = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.clearDoc = function() {
  this.setDoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cdReq.prototype.hasDoc = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.toObject = function(opt_includeInstance) {
  return proto.aitmed.ecos.v1beta1.cdResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aitmed.ecos.v1beta1.cdResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cdResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    jwt: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    doc: (f = msg.getDoc()) && ecos_v1beta1_types_pb.Doc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aitmed.ecos.v1beta1.cdResp}
 */
proto.aitmed.ecos.v1beta1.cdResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aitmed.ecos.v1beta1.cdResp;
  return proto.aitmed.ecos.v1beta1.cdResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aitmed.ecos.v1beta1.cdResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aitmed.ecos.v1beta1.cdResp}
 */
proto.aitmed.ecos.v1beta1.cdResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new ecos_v1beta1_types_pb.Doc;
      reader.readMessage(value,ecos_v1beta1_types_pb.Doc.deserializeBinaryFromReader);
      msg.setDoc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aitmed.ecos.v1beta1.cdResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aitmed.ecos.v1beta1.cdResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aitmed.ecos.v1beta1.cdResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDoc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ecos_v1beta1_types_pb.Doc.serializeBinaryToWriter
    );
  }
};


/**
 * optional string jwt = 1;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cdResp.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 code = 2;
 * @return {number}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.aitmed.ecos.v1beta1.cdResp.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.aitmed.ecos.v1beta1.cdResp.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Doc doc = 4;
 * @return {?proto.aitmed.ecos.v1beta1.Doc}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.getDoc = function() {
  return /** @type{?proto.aitmed.ecos.v1beta1.Doc} */ (
    jspb.Message.getWrapperField(this, ecos_v1beta1_types_pb.Doc, 4));
};


/** @param {?proto.aitmed.ecos.v1beta1.Doc|undefined} value */
proto.aitmed.ecos.v1beta1.cdResp.prototype.setDoc = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.clearDoc = function() {
  this.setDoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aitmed.ecos.v1beta1.cdResp.prototype.hasDoc = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.aitmed.ecos.v1beta1);
